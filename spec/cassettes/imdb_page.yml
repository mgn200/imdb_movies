---
http_interactions:
- request:
    method: get
    uri: http://imdb.com/title/tt0081398/?ref_=chttp_tt_116
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Sun, 29 Oct 2017 10:42:59 GMT
      Server:
      - Server
      Location:
      - http://www.imdb.com/title/tt0081398/?ref_=chttp_tt_116
      Content-Length:
      - '262'
      Nncoection:
      - close
      Content-Type:
      - text/html; charset=iso-8859-1
    body:
      encoding: UTF-8
      string: |
        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        <html><head>
        <title>301 Moved Permanently</title>
        </head><body>
        <h1>Moved Permanently</h1>
        <p>The document has moved <a href="http://www.imdb.com/title/tt0081398/?ref_=chttp_tt_116">here</a>.</p>
        </body></html>
    http_version: 
  recorded_at: Sun, 29 Oct 2017 10:42:59 GMT
- request:
    method: get
    uri: http://www.imdb.com/title/tt0081398/?ref_=chttp_tt_116
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 29 Oct 2017 10:42:59 GMT
      Server:
      - Server
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com
        *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de
        *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk
        search.aol.com bing.com www.bing.com
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Vary:
      - Accept-Encoding,User-Agent
      Set-Cookie:
      - session-id-time=2139993779; Domain=.imdb.com; Expires=Fri, 16-Nov-2085 13:57:07
        GMT; Path=/
      - session-id=000-0000000-0000000; Domain=.imdb.com; Expires=Fri, 16-Nov-2085
        13:57:07 GMT; Path=/
      - uu=BCYtHy6o8DrQE6QzkPL87vlegSd9n1BFpSMpCLyWY6PASOa_pt_NlY45T0tXyDs4K7c6i2Vl356P%0D%0AuuQZ4QeTsWkf5G4Ulb-kj5Bss17Utv7XBt4Dn_gezXTfdYYnJpi08N6G3aTyNc92lDJWUlo1f5VU%0D%0AmOtX2QAlVemBbT0U_Slg0rzk7oYkx2_QKq44UjxNOpxtVlW63jQBpwxU8dzIq9NiKhisRIMLI-9q%0D%0AVPFPrApzHWnLgkI1ccQnXtN0v2eeRWR9dDDr6T627xF0rBnr51b8QQ%0D%0A;
        Domain=.imdb.com; Expires=Fri, 16-Nov-2085 13:57:07 GMT; Path=/
      P3p:
      - policyref="http://i.imdb.com/images/p3p.xml",CP="CAO DSP LAW CUR ADM IVAo
        IVDo CONo OTPo OUR DELi PUBi OTRi BUS PHY ONL UNI PUR FIN COM NAV INT DEM
        CNT STA HEA PRE LOC GOV OTC "
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 29 Oct 2017 10:43:00 GMT
- request:
    method: get
    uri: http://imdb.com/title/tt0120382/?ref_=chttp_tt_219
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Sun, 29 Oct 2017 14:27:42 GMT
      Server:
      - Server
      Location:
      - http://www.imdb.com/title/tt0120382/?ref_=chttp_tt_219
      Content-Length:
      - '262'
      Nncoection:
      - close
      Content-Type:
      - text/html; charset=iso-8859-1
    body:
      encoding: UTF-8
      string: |
        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        <html><head>
        <title>301 Moved Permanently</title>
        </head><body>
        <h1>Moved Permanently</h1>
        <p>The document has moved <a href="http://www.imdb.com/title/tt0120382/?ref_=chttp_tt_219">here</a>.</p>
        </body></html>
    http_version: 
  recorded_at: Sun, 29 Oct 2017 14:27:42 GMT
- request:
    method: get
    uri: http://www.imdb.com/title/tt0120382/?ref_=chttp_tt_219
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 29 Oct 2017 14:27:43 GMT
      Server:
      - Server
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com
        *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de
        *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk
        search.aol.com bing.com www.bing.com
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Vary:
      - Accept-Encoding,User-Agent
      Set-Cookie:
      - session-id-time=2140007263; Domain=.imdb.com; Expires=Fri, 16-Nov-2085 17:41:50
        GMT; Path=/
      - session-id=000-0000000-0000000; Domain=.imdb.com; Expires=Fri, 16-Nov-2085
        17:41:50 GMT; Path=/
      - uu=BCYkMNxFWOyFB3yRmIxLAgya45ttUgTZgvBaU2pyz3XOIX0xpPOqtUlgn6BxHIjKCDqYdVS4IWh_%0D%0AKALSBlGOI6cng7HsZreH6d9am7MesBY_mWn-yI4v09qTXRD6Z3qQzMuDKl7zXStqiH4AAG0E68hk%0D%0A_Ergp6lkZ9H9nu_uIu4g5zszPow7qgTehOTXJNaA3G_48rffyrEjoe0iFTbIXJf-Pfd48Hz_0M-v%0D%0AzytJvR4RE4FhyLWkkDIgc6dXySC37RXTwNdCGudM9g-fFf8L2UUnVQ%0D%0A;
        Domain=.imdb.com; Expires=Fri, 16-Nov-2085 17:41:50 GMT; Path=/
      P3p:
      - policyref="http://i.imdb.com/images/p3p.xml",CP="CAO DSP LAW CUR ADM IVAo
        IVDo CONo OTPo OUR DELi PUBi OTRi BUS PHY ONL UNI PUR FIN COM NAV INT DEM
        CNT STA HEA PRE LOC GOV OTC "
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 29 Oct 2017 14:27:43 GMT
recorded_with: VCR 3.0.3
